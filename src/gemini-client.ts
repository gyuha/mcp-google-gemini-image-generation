import { GoogleGenAI, Modality } from "@google/genai";
import dotenv from 'dotenv';
import fs from 'fs-extra';
import path from 'path';
import { saveBase64Image, generateUniqueFilename } from './image-utils.js';
import { ImageGenerationResult } from './types.js';

// Load environment variables from .env and .env.local
dotenv.config();
// Check if .env.local exists and load it (will override .env values)
const envLocalPath = path.resolve(process.cwd(), '.env.local');
if (fs.existsSync(envLocalPath)) {
  const envLocal = dotenv.parse(fs.readFileSync(envLocalPath));
  for (const key in envLocal) {
    process.env[key] = envLocal[key];
  }
}

// Get API key from environment variables
const API_KEY = process.env.GOOGLE_API_KEY;
// Default output directory
const DEFAULT_OUTPUT_DIR = process.env.DEFAULT_OUTPUT_DIR || './generated-images';

/**
 * Generates an image using Google's Gemini API
 */
export async function generateImage(
  prompt: string,
  model: string = 'gemini-2.0-flash-preview-image-generation', 
  width: number = 1024,
  height: number = 1024,
  outputDir: string = DEFAULT_OUTPUT_DIR
): Promise<ImageGenerationResult> {
  try {
    const API_KEY = process.env.GOOGLE_API_KEY;
    if (!API_KEY) {
      throw new Error('GOOGLE_API_KEY is not set in environment variables');
    }

    console.log(`Generating image with prompt: "${prompt}"`);
    console.log(`Using model: ${model}, dimensions: ${width}x${height}`);

    // Initialize the Gemini API client with the API key
    const ai = new GoogleGenAI({ apiKey: API_KEY });
    
    // Prepare content with dimensions specified in the prompt
    // The prompt should specify both what to generate and the desired dimensions
    const contents = [
      { text: `Generate an image of: ${prompt}. The image should be ${width}x${height} pixels.` }
    ];
    
    console.log(`Sending request to Gemini API with prompt`);
    
    // Set responseModalities to include "Image" so the model can generate an image
    const response = await ai.models.generateContent({
      model: model,
      contents: contents,
      config: {
        responseModalities: [Modality.TEXT, Modality.IMAGE],
      },
    });
    
    console.log("Response received from Gemini API");
    
    // Validate response structure
    if (!response.candidates || 
        response.candidates.length === 0 || 
        !response.candidates[0].content ||
        !response.candidates[0].content.parts) {
      throw new Error('Invalid or empty response from Gemini API');
    }
    
    let imagePath = "";
    let hasImage = false;
    
    // Process each part of the response
    for (const part of response.candidates[0].content.parts) {
      // Based on the part type, either show the text or save the image
      if (part.text) {
        console.log("Text response:", part.text);
      } else if (part.inlineData) {
        console.log(`Image data found with MIME type: ${part.inlineData.mimeType}`);
        
        const imageData = part.inlineData.data;
        if (!imageData) {
          console.log("No image data found in the response part");
          continue;
        }
        
        // Save the image
        const filename = generateUniqueFilename(prompt);
        imagePath = saveBase64Image(imageData, outputDir, filename);
        hasImage = true;
        
        console.log(`Image saved successfully at: ${imagePath}`);
      }
    }
    
    if (!hasImage) {
      throw new Error('No image data was generated by Gemini API');
    }
    
    return {
      success: true,
      imagePath
    };
    
  } catch (error) {
    console.error('Error generating image:', error);
    return {
      success: false,
      error: error instanceof Error ? error.message : 'Unknown error occurred'
    };
  }
}